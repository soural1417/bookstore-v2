type User @model @auth(rules: [{allow: owner}, {allow: groups, groups: ["UserAdmin"]}]) {
  id: ID!
  username: String!
  teams: [TeamMembership] @connection(name: "UserTeams")
}

# Create a join model to facilitate the many-to-many relationship.
# Only "TeamMembershipAdmin" members can create, update, and delete membership
# objects that add users to teams.
type TeamMembership @model(queries: null) @auth(rules: [{ allow: groups, groups: ["TeamMembershipAdmin"]}]) {
  id: ID!
  team: Team! @connection(name: "TeamMembership")
  member: User! @connection(name: "UserTeams")
}

# Only "Admin" members can create, update, and delete teams themselves.
type Team @model(queries: null) @auth(rules: [{ allow: groups, groups: ["Admin"], queries: null }]) {
  id: ID!
  name: String!
  members: [TeamMembership] @connection(name: "TeamMembership")
  tasks: [Task] @connection(name: "TeamTasks")
}

# Non @model types are stored inline as maps and lists in other @model types.
type SubTask {
    content: String!
    due: String!
}

# There is currently no way to specify that only members of a team may create
# items but you can get very close with a combo of group and owner auth.
# I am passing queries null so no top level task queries are generated and
# users must instead read them via User.teams.team.tasks
type Task @model(queries: null) @auth(
    rules: [
        { allow: groups, groups: ["TaskAdmin"], mutations: [create]},
        { allow: owner, ownerField: "editors", mutations: [update, delete] }
    ]
) {
    id: ID!
    title: String!
    team: Team @connection(name: "TeamTasks")
    
    # Only "TaskAdmins" can create users but any user who's username is
    # in this list will be able to update, delete, get, and list tasks.
    editors: [String]

    # Note: This is not a @connection because the non @model type will be inlined
    subtasks: [SubTask]
}

type Book
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to read posts
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to read posts
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  image: String
  author: String
  featured: Boolean
  price: Float
  orders: [BookOrder] @connection(keyName: "byBook", fields: ["id"])
}

type BookOrder
  @model(queries: null, subscriptions: null)
  @key(name: "byBook", fields: ["book_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "book_id"])
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  book_id: ID!
  order_id: ID!
  book: Book @connection(fields: ["book_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  books: [BookOrder] @connection(keyName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}


type Message @model {
  id: ID!
  user: String
  text: String
}

enum PostStatus {
  ACTIVE
  INACTIVE
  STAGED # new enum value
}

type Post @model {
  id: ID!
  title: String!
  rating: Int!
  status: PostStatus!
}